?which
colMeans(iris[1],(iris[5]="virginica"))
colMeans(iris[1],(iris="virginica"))
colMeans(iris[1],which(iris[5]="virginica"))
iris[5]
colMeans(iris[1],which(iris[4]="virginica"))
iris[4]
iris[,4]
iris
iris[1]
iris
library[datasets]
libraray(datasets)
library(datasets)
data(iris)
iris
iris[1]
colmeans(iris[Sepal.Lenght])
colMeans(iris[Sepal.Lenght])
colMeans(iris[Sepal.Length])
colMeans(iris[1])
colMeans(iris$Sepal.Length)
mean(iris$Sepal.Length)
colMeans[iris[1],which(iris[5]="virginica")]
iris[5]
iris[5]="virginica"
iris[5]
mean(iris$Sepal.Length,which(iris$Species)="virginica")
mean(which(iris$Species)="virginica",iris$Sepal.Length,)
mean(iris$Sepal.Length,which(iris$Species)="virginica")
mean(iris$Sepal.Length,which(iris$Species="virginica")
mean(iris$Sepal.Length,which(iris$Species="virginica"))
mean(iris$Sepal.Length,which(iris$Species=virginica))
mean(iris$Sepal.Length,which(iris$Species=="virginica"))
?mean
mean(iris[Species=="virginica",Sepal.Length)
mean(iris[Species=="virginica",Sepal.Length])
mean(iris["Species"=="virginica","Sepal.Length"])
iris[Species]
iris$Species
mean(iris$Species"=="virginica",iris$Sepal.Length])
mean(iris$Species=="virginica",iris$Sepal.Length])
mean(iris$Species=="virginica",iris$Sepal.Length)
mean(iris[iris$Species=="virginica",iris$Sepal.Length])
mean(iris[which(iris$Species=="virginica",iris$Sepal.Length])
mean(iris[which(iris$Species=="virginica",iris$Sepal.Length])
mean(iris[which(iris$Species=="virginica"),iris$Sepal.Length])
mean(iris[which(iris$Species=="virginica"),"Sepal.Length"])
iris
library(datasets)
data(irs)
data(iris)
iris
mean(iris[which(iris$Species)=="virginica","Sepal.Length"])
mean(iris[which(iris$Species)=="virginica",Sepal.Length])
mean(iris[which(iris$Species=="virginica"),"Sepal.Length"])
colMeans
?colMeans
colMeans(iris[which(iris[Species]=="virginica"),"Sepal.Length"])
colMeans(iris[which(iris$Species=="virginica"),"Sepal.Length"])
colMeans(iris[which(iris$Species=="virginica"),"Sepal.Length",])
colMeans(iris[which(iris$Species=="virginica"),"Sepal.Length"])
iris[which(iris$Species=="virginica"),"Sepal.Length"]
iris[which(iris$Species=="virginica"),"Sepal.Length",drop=FALSE]
colMeans(iris[which(iris$Species=="virginica"),"Sepal.Length",drop=FALSE])
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
split(mtcars, mtcars$cyl)
split(mtcars$mpg, mtcars$cyl)
?split
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
?apply
mean(mtcars$mpg, mtcars$cyl)
split(mtcars$hp,mtcars$cyl)
split(mtcars$hp,mtcars$cyl$4)
split(mtcars$hp,mtcars$cyl)
hpcyl<-split(mtcars$hp,mtcars$cyl)
hpcyl
hpcyl[4]
hpcyl[1]
hpcyl$4
hpcyl["4"
hpcyl["4"]
hpcyl["4"]-hpcyl['8']
mean(hpcyl["4"])-mean(hpcyl['8'])
hpcyl["4"]
mean(hpcyl["4"])
mean(hpcyl[,"4"])
hpcyl[1]
hpcyl[2]
hpcyl[3]
mean(hpcyl[3])
mean(hpcyl$4)
mtcars
split(mtcars$hp)
split(mtcars$hp,mtcars$cyl)
sapply(split(mtcars$hp,mtcars$cyl))
sapply(split(mtcars$hp,mtcars$cyl),mean)
x<-sapply(split(mtcars$hp,mtcars$cyl),mean)
str(s)
str(x)
attr(x)
attribute(x)
attributes(x)
dim(x)
x
x[1]
x[3]
x[3]-x[1]
debug(ls)
ls
debug(ls)
ls
8/7
8%%7
5%%2
remainder <- function(num, divisor=2) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
r<-num%%divisor
}
remainder(5)
remainder <- function(num, divisor=2) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
r<-num%%divisor
r
}
remainder(5)
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate(sum,c(1,2,3))
?sd
telegram <- function(...){
paste("START",...,"STOP")
}
telegram("good")
mad_libs <- function(...){
# Do your argument unpacking here!
args<-list(...)
place<-args[["place"]]
adjective<-args[[adjective]]
noun<-args[[noun]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("try")
mad_libs("try","try2","try3")
mad_libs("place","adjective","noun")
mad_libs <- function(...){
# Do your argument unpacking here!
args<-list(...)
place<-args[["place"]]
adjective<-args[["adjective"]]
noun<-args[["noun""]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
# Do your argument unpacking here!
args<-list(...)
place<-args[["place"]]
adjective<-args[["adjective"]]
noun<-args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("try","try2","try3")
mad_libs("place","adjective","noun")
"%p%" <- function(left,right){ # Remember to add arguments!
left<-"Good"
right<-"job!"
}
"Good"%p%"job"
"%p%" <- function(left,right){ # Remember to add arguments!
left<-"Good"
right<-"job!"
res<-paste(left,right)
}
"Good"%p%"job"
"%p%" <- function(left,right){ # Remember to add arguments!
left<-"Good"
right<-"job!"
res<-paste(left,right)
res
}
"Good"%p%"job"
"%p%" <- function(left,right){ # Remember to add arguments!
res<-paste(left,right)
res
}
"Good"%p%"job"
java.home="C:\Program Files\Java\jre1.8.0_25") library("xlsx")
java.home="C:\Program Files\Java\jre1.8.0_25" library("xlsx")
java.home="C:\Program Files\Java\jre1.8.0_25"
library(XML)
install.packages("XML")
library(XML)
fileurlxml<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurlxml,useInternal=TRUE)
doc<-xmlTreeParse(fileurlxml,useInternal=TRUE)
doc<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal=TRUE)
xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal=TRUE)
?xmlTreeParse
doc<-htmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal=TRUE)
doc<-xmlTreeParse(fileurlxml,useInternal=TRUE)
doc<-htmlTreeParse(fileurlxml,useInternal=TRUE)
doc
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants"
doc<-htmlTreeParse(fileurl,useInternal=TRUE)
doc
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
doc
fileUrl<-"http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
doc
fileUrl<-"http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc2<-htmlTreeParse(fileUrl,useInternal=TRUE)
doc2
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
doc
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE,method="curl")
doc<-xmlTreeParse(fileUrl)
doc<-xmlTreeParse(fileUrl,useInternal=TRUE,isURL=TRUE)
doc<-xmlTreeParse(fileUrl,isURL=TRUE)
doc<-xmlTreeParse(fileUrl,useInternal=FALSE,isURL=TRUE)
doc<-xmlTreeParse(fileUrl,useInternalNodes=TRUE,isURL=TRUE)
doc<-xmlTreeParse(fileUrl,useInternalNodes=TRUE)
library(XML)
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
doc <- xmlTreeParse(file=fileUrl2,useInternal=TRUE)
doc
head(doc)
xmlRoot(doc)
xmlName(xmlRoot(doc))
rootnode<-xmlRoot(doc)
names(rootnode)
xmlSApply(rootnode,xmlValue)
name<-xpathSApply(doc,"//name",xmlValue)
name
head(name)
zipcode<-xpathSApply(doc,"//zipcode",xmlValue)
head(zipcode)
zipcode["21231"]
zipcode[21231]
zipcode[1]
zipcode[,"21231""]
zipcode[,"21231"]
zipcode["21231"]
zipcode
zipcode2<-as.character(zipcode)
zipcode2["21231"]
zipcode2<-as.numeric(zipcode)
zipcode2["21231"]
which[zipcode=="21231"]
attribute(zipcode)
attributes(zipcode)
dimensions(zipcode)
zipcode2<-data.frame(zipcode)
zipcode2[21231]
zipcode2["21231"]
zipcode2[,"21231"]
which(zipcode2=="21231")
z21231<-which(zipcode2=="21231")
nrow(21231)
nrow(z21231)
length(z21231)
attributes(zipcode2)
fileurlcsv<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileurlcsv,destfile="Q5.csv",method="curl")
install.packages(data.table)
library(data.table)
install.packages("data.table")
library(data.table)
ls()
list.files
list.files()
DT<-fread("Q5.csv")
head(DT)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
head(DT$SEX)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15) mean(DT[DT$SEX==2,]$pwgtp15))
?system.time
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl
swirl()
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv("path2csv.csv",stringAsFactors=FALSE)
mydf<-read.csv("path2csv",stringAsFactors=FALSE)
mydf<-read.csv("path2csv",stringsAsFactors=FALSE)
mydf<-read.csv("path2csv.csv",stringsAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-(X:size))
select(cran,-5:20)
select(cran,-(5:20)
select(cran,-(5:20))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version=="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
students3
submit()
?spread
submit()
extract_number("class5")
extract_numeric("class5")
submit()
?mutate
library(dplyr)
?mutate
mutate(class=extract_numeric(class))
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
?separate
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
now()
this_moment<-now()
this_moment
minute(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment<-update()
this_moment<-update(this_moment)
this_moment<-update(this_moment,hours=10,minutes=16,seconds=0)
this_moment
?now
now(tzone="America/New_York")
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17,2008",tz="Singapor")
last_time<-mdy("June 17,2008",tz="Singapore")
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_longnew_interval(last_time,arrive)
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
par(mar)
setwd("~/ExData_Plotting1")
source("plot1.R")
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
